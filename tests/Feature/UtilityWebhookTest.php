<?php

namespace Tests\Feature;

use Corals\Settings\Facades\Modules;
use Corals\User\Models\User;
use Corals\Utility\Webhook\Facades\Webhooks;
use Corals\Utility\Webhook\Models\Webhook;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityWebhookTest extends TestCase
{
    // use DatabaseTransactions;

    protected $payload;
    protected $webhook;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_utility_webhook_submit_event()
    {
        $this->payload = 'contentRequest';

        $moduleSMS = ['module' => 'SMS', 'code' => 'corals-sms'];

        if (Modules::isModuleActive($moduleSMS['code'])) {
            $events = config('sms.webhook.events', []);
            foreach ($events as $eventName => $jobClass) {
                Webhooks::registerEvent($eventName, $jobClass);
            }
            $eventName = array_rand($events);

            $response = $this->post('utilities/webhooks/' . $eventName, ['payload' => $this->payload]);

            $response->assertSeeText('Event ' . $eventName . ' has been submitted successfully.');

            $this->webhook = Webhook::where('event_name', $eventName)->first();

            $this->assertDatabaseHas('utility_webhooks', [
                'id' => $this->webhook->id,
                'event_name' => $this->webhook->event_name,
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_utility_webhook_delete()
    {
        $this->test_utility_webhook_submit_event();

        if ($this->webhook) {
            $response = $this->delete('utilities/webhooks/' . $this->webhook->hashed_id);

            $response->assertStatus(200)->assertSeeText('Webhook has been deleted successfully.');

            $this->isSoftDeletableModel(Webhook::class);
            $this->assertDatabaseMissing('utility_webhooks', [
                'id' => $this->webhook->id,
                'event_name' => $this->webhook->event_name,
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_utility_webhook_process()
    {
        $this->test_utility_webhook_submit_event();

        if ($this->webhook) {
            $response = $this->post('utilities/webhooks/' . $this->webhook->hashed_id.'/process');

            $response->assertStatus(200)->assertSeeText('Webhook has been processed successfully');
        }
        $this->assertTrue(true);
    }
}
